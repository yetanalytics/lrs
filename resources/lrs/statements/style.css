/* global */

html {
  height: 100%;
}

body {
  margin: 0 0 0 0;
  font-family: monospace;
  height: 100%;
}

nav.query {
  display: grid;
}

nav.query > .json-map {
  margin-left: 1em;
  margin-bottom: 1em;
  border: 1px solid rgba(0,0,0,.05);
}

label.query-toggle {
  display: inline-block;
  margin: 1em;
}

a.query-remove-link {
  margin: 1em;
}

body > main {
  height: 100%;
}

/* JSON-specific */

.json-map {
  display:grid;
}

.json-map > .json-map-entry:not(:last-child) {
  border-bottom: 1px solid rgba(0,0,0,.05);
}

.json-array {
  display:grid;
  padding-left: .2em;
}

.json-array:not(.columnar) > * {
  border-bottom: 1px solid rgba(0,0,0,.05);
  border-top: 1px solid rgba(0,0,0,.05);
  border-left: 1px solid rgba(0,0,0,.05);
}

.json-array:not(.columnar) > *:not(:first-child) {
  margin-top: .1em;
}

.json-array:not(.columnar) > *:not(:last-child) {
  margin-bottom: .1em;
}

.json-array:not(.columnar) > :last-child {
  margin-bottom: .2em;
}

.json-array.columnar {
  grid-template-columns: 1fr 1fr 1fr;
}

.json-array.columnar > :not(:last-child) {
  border-right: 1px solid rgba(0,0,0,.05);
}


.json-array.columnar > .json-array-element {
  padding: 1em;
}



.json-array-element {
  display:grid;
}

.json-array-action {
  display: grid;
}


.json-map-entry {
  display:grid;
  grid-template-columns: 1fr 12fr;
}

/* json-map-action shares layout styling with json-map-entry but contains actions */
.json-map-action {
  display:grid;
  grid-template-columns: 1fr;
  padding: 1em;
}

.json-map-entry-key {
  padding: 1em;
  background-color: rgba(0,0,0,.025);
}

.json-map-entry-key:after {
  content: ":";
}


.json-map-entry-val {
  border-left: 1px solid rgba(0,0,0,.05);
}

/* leaf outer */

.json-map-entry-val > .json-map {
  margin-left: .2em;
  margin-bottom: .2em;
  border-left: 1px solid rgba(0,0,0,.05);
  border-bottom: 1px solid rgba(0,0,0,.05);
}

.json-map-entry-val.scalar {
  padding: 1em;
}

/* leaf inner */
.json-scalar {
  text-overflow: ellipsis;
  display: inline;
}

/* truncation.. inline collapse with json in mind */
/* expects a truncator input, preceded by label. Will hide the rest of the things except .no-truncate */
label.truncator-label {
  display:grid;
  grid-template-columns: 1fr;
  padding: 1em;
}

input.truncator ~ :not(.no-truncate,label.truncator-label) {
  display: none;
}

input.truncator:checked ~ :not(.no-truncate).json {
  display: grid;
}

input.truncator:checked ~ label.truncator-label {
  display: none;
}

/* togglable */
input.truncator-toggle ~ :not(.no-truncate,label.truncator-toggle-label) {
  display: none;
}

input.truncator-toggle:checked ~ :not(.no-truncate,label.truncator-toggle-label) {
  display: grid;
}

label.truncator-toggle-label:after {
  padding-left: .2em;
  content: "+";
  display: inline-block;
}

input.truncator-toggle:checked ~ label.truncator-toggle-label:after {
  content: "-";
}
